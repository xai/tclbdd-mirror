# tdbc.test --
#
#       Tests for convenience commands in TDBC
#
# Copyright (c) 2013 by Kevin B. Kenny.

package require tcltest 2
namespace import -force ::tcltest::*
tcltest::loadTestedCommands
package require bdd

proc evdump {dump nvars node truth varindex} {
    if {$node < 2} {
	return $node
    }
    set v [expr {$truth & 1}]
    set truth [expr {$truth >> 1}]
    lassign [dict get $dump $node] testvar iffalse iftrue
    if {$testvar > $varindex} {
	tailcall evdump $dump $nvars $node $truth [expr {$varindex+1}]
    } elseif {$v} {
	tailcall evdump $dump $nvars $iftrue $truth [expr {$varindex+1}]
    } else {
	tailcall evdump $dump $nvars $iffalse $truth [expr {$varindex+1}]
    }
}

proc truthtable {dump nvars} {
    set root [lindex $dump 0]
    set result {}
    for {set i 0} {$i < (1<<$nvars)} {incr i} {
	append result [evdump $dump $nvars $root $i 0]
    }
    return $result
}

test bdd-1.0 {simple create/delete} {
    set s [bdd::system new]
    rename $s {}
} {}

test bdd-1.1 {create with nonstandard size} {
    rename [bdd::system new 2048] {}
} {}
test bdd-1.2 {wrong # args} {*}{
    -body {rename [bdd::system new too many] {}}
    -returnCodes error
    -match glob
    -result {wrong # args*}
}
test bdd-1.3 {size not an integer} {*}{
    -body {rename [bdd::system new garbage] {}}
    -returnCodes error
    -result {expected integer but got "garbage"}
}

test bdd-2.1 {beadindex wrong # args} {*}{
    -setup {bdd::system create sys}
    -body {sys beadindex}
    -cleanup {rename sys {}}
    -returnCodes error
    -match glob
    -result {wrong # args: *}
}

test bdd-2.2 {predefined 0} {*}{
    -setup {bdd::system create sys}
    -body {sys beadindex 0}
    -cleanup {rename sys {}}
    -result 0
}

test bdd-2.3 {predefined 1} {*}{
    -setup {bdd::system create sys}
    -body {sys beadindex 1}
    -cleanup {rename sys {}}
    -result 1
}

test bdd-2.4 {expression not found} {*}{
    -setup {bdd::system create sys}
    -body {list [catch {sys beadindex garbage} result] $result $::errorCode}
    -cleanup {rename sys {}}
    -result \
	{1 {expression named "garbage" not found} {BDD ExprNotFound garbage}}
}

test bdd-3.1 {constant - wrong # args} {*}{
    -setup {bdd::system create sys}
    -body {sys constant}
    -cleanup {rename sys {}}
    -returnCodes error
    -match glob
    -result {wrong # args: *}
}

test bdd-3.2 {constant - bad value} {*}{
    -setup {bdd::system create sys}
    -body {sys constant rubbish garbage}
    -cleanup {rename sys {}}
    -returnCodes error
    -match glob
    -result {expected boolean value but got "garbage"}
}

test bdd-3.3 {constant 0} {*}{
    -setup {bdd::system create sys}
    -body {sys constant zero false; sys beadindex zero}
    -cleanup {rename sys {}}
    -result 0
}

test bdd-3.4 {constant 1} {*}{
    -setup {bdd::system create sys}
    -body {sys constant one true; sys beadindex one}
    -cleanup {rename sys {}}
    -result 1
}

test bdd-4.1 {copy - wrong # args} {*}{
    -setup {bdd::system create sys; sys constant one true}
    -body {sys copy}
    -cleanup {rename sys {}}
    -returnCodes error
    -match glob
    -result {wrong # args: *}
}

test bdd-4.2 {copy - can't find expr} {*}{
    -setup {bdd::system create sys; sys constant one true}
    -body {list [catch {sys copy yes garbage} result] $result $::errorCode}
    -cleanup {rename sys {}}
    -result \
	{1 {expression named "garbage" not found} {BDD ExprNotFound garbage}}
}

test bdd-4.3 {copy} {*}{
    -setup {bdd::system create sys; sys constant one true}
    -body {sys copy yes one; sys beadindex yes}
    -cleanup {rename sys {}}
    -result 1
}

test bdd-5.1 {dump - wrong # args} {*}{
    -setup {bdd::system create sys}
    -body {sys dump}
    -cleanup {rename sys {}}
    -returnCodes error
    -match glob
    -result {wrong # args: *}
}

test bdd-5.2 {dump - leaf 0} {*}{
    -setup {bdd::system create sys}
    -body {sys dump 0}
    -cleanup {rename sys {}}
    -result {0 {0 0 0}}
}

test bdd-5.3 {dump - leaf 1} {*}{
    -setup {bdd::system create sys}
    -body {sys dump 1}
    -cleanup {rename sys {}}
    -result {1 {0 1 1}}
}

test bdd-6.1 {nthvar - wrong # args} {
    -setup {bdd::system create sys}
    -body {sys nthvar}
    -cleanup {rename sys {}}
    -returnCodes error
    -match glob
    -result {wrong # args: *}
}

test bdd-6.2 {nthvar - bad var index} {
    -setup {bdd::system create sys}
    -body {sys nthvar a garbage}
    -cleanup {rename sys {}}
    -returnCodes error
    -result {expected integer but got "garbage"}
}

test bdd-6.3 {nthvar - var 0} {
    -setup {bdd::system create sys}
    -body {sys nthvar a 0; sys dump a}
    -cleanup {rename sys {}}
    -result {2 {0 0 1} 0 {1 0 0} 1 {1 1 1}}
}

test bdd-6.4 {nthvar - two vars} {
    -setup {bdd::system create sys}
    -body {sys nthvar a 0; sys nthvar b 1; list [sys dump b] [sys dump a]}
    -cleanup {rename sys {}}
    -result {{3 {1 0 1} 0 {2 0 0} 1 {2 1 1}} {2 {0 0 1} 0 {2 0 0} 1 {2 1 1}}}
}

test bdd-6.5 {nthvar - redundant var (tests duplicate BDD_MakeBead)} {
    -setup {bdd::system create sys}
    -body {
	sys nthvar a 0; sys nthvar b 1; sys nthvar c 0
	list [sys beadindex a] [sys beadindex b] [sys beadindex c]
    }
    -cleanup {rename sys {}}
    -result {2 3 2}
}

test bdd-7.1 {notnthvar - wrong # args} {
    -setup {bdd::system create sys}
    -body {sys notnthvar}
    -cleanup {rename sys {}}
    -returnCodes error
    -match glob
    -result {wrong # args: *}
}

test bdd-7.2 {notnthvar - bad var index} {
    -setup {bdd::system create sys}
    -body {sys notnthvar a garbage}
    -cleanup {rename sys {}}
    -returnCodes error
    -result {expected integer but got "garbage"}
}

test bdd-7.3 {notnthvar - var 0} {
    -setup {bdd::system create sys}
    -body {sys notnthvar !a 0; sys dump !a}
    -cleanup {rename sys {}}
    -result {2 {0 1 0} 1 {1 1 1} 0 {1 0 0}}
}

test bdd-7.4 {notnthvar - two vars} {
    -setup {bdd::system create sys}
    -body {
	sys notnthvar !a 0; sys notnthvar !b 1
	list [sys dump !b] [sys dump !a]
    }
    -cleanup {rename sys {}}
    -result {{3 {1 1 0} 1 {2 1 1} 0 {2 0 0}} {2 {0 1 0} 1 {2 1 1} 0 {2 0 0}}}
}

test bdd-7.5 {nthvar - redundant var (tests duplicate BDD_MakeBead)} {
    -setup {bdd::system create sys}
    -body {
	sys notnthvar !a 0; sys notnthvar !b 1; sys notnthvar !c 0
	list [sys beadindex !a] [sys beadindex !b] [sys beadindex !c]
    }
    -cleanup {rename sys {}}
    -result {2 3 2}
}

test bdd-8.1 {negate - wrong # args} {
    -setup {bdd::system create sys}
    -body {sys ~}
    -cleanup {rename sys {}}
    -returnCodes error
    -match glob
    -result {wrong # args: *}
}

test bdd-8.2 {negate - bad expr} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
    }
    -body {list [catch {sys ~ b garbage} result] $result $::errorCode}
    -cleanup {rename sys {}}
    -result \
	{1 {expression named "garbage" not found} {BDD ExprNotFound garbage}}
}

test bdd-8.3 {negate 0} {
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
    }
    -body {sys ~ b 0; sys beadindex b}
    -cleanup {rename sys {}}
    -result 1
}

test bdd-8.4 {negate 1} {
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
    }
    -body {sys ~ b 1; sys beadindex b}
    -cleanup {rename sys {}}
    -result 0
}

test bdd-8.5 {negate a} {
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
    }
    -body {sys ~ b a; expr {[sys beadindex b] == [sys beadindex !a]}}
    -cleanup {rename sys {}}
    -result 1
}

test bdd-8.5 {negate !a} {
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
    }
    -body {sys ~ b !a; expr {[sys beadindex b] == [sys beadindex a]}}
    -cleanup {rename sys {}}
    -result 1
}

test bdd-9.1 {binop - wrong # args} {
    -setup {bdd::system create sys}
    -body {sys nand}
    -cleanup {rename sys {}}
    -returnCodes error
    -match glob
    -result {wrong # args: *}
}

test bdd-9.2 {binary operator - bad first expr} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 0; sys notnthvar !b 0
    }
    -body {list [catch {sys & c garbage b} result] $result $::errorCode}
    -cleanup {rename sys {}}
    -result \
	{1 {expression named "garbage" not found} {BDD ExprNotFound garbage}}
}

test bdd-9.3 {binary operator - bad second expr} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 0; sys notnthvar !b 0
    }
    -body {list [catch {sys & c a garbage} result] $result $::errorCode}
    -cleanup {rename sys {}}
    -result \
	{1 {expression named "garbage" not found} {BDD ExprNotFound garbage}}
}

test bdd-9.4 {binary nor operator} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
    }
    -body {
	set tables {}
	sys nor c !a !b
	lappend tables [truthtable [sys dump c] 2]
	sys nor c a !b
	lappend tables [truthtable [sys dump c] 2]
	sys nor c !a b
	lappend tables [truthtable [sys dump c] 2]
	sys nor c a b
	lappend tables [truthtable [sys dump c] 2]
	set tables
    }
    -cleanup {rename sys {}}
    -result {0001 0010 0100 1000}
}

test bdd-9.5 {binary < operator} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
    }
    -body {
	set tables {}
	sys < c !a !b
	lappend tables [truthtable [sys dump c] 2]
	sys < c a !b
	lappend tables [truthtable [sys dump c] 2]
	sys < c !a b
	lappend tables [truthtable [sys dump c] 2]
	sys < c a b
	lappend tables [truthtable [sys dump c] 2]
	set tables
    }
    -cleanup {rename sys {}}
    -result {0100 1000 0001 0010}
}

test bdd-9.6 {binary > operator} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
    }
    -body {
	set tables {}
	sys > c !a !b
	lappend tables [truthtable [sys dump c] 2]
	sys > c a !b
	lappend tables [truthtable [sys dump c] 2]
	sys > c !a b
	lappend tables [truthtable [sys dump c] 2]
	sys > c a b
	lappend tables [truthtable [sys dump c] 2]
	set tables
    }
    -cleanup {rename sys {}}
    -result {0010 0001 1000 0100}
}

test bdd-9.7 {binary ^ operator} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
    }
    -body {
	set tables {}
	sys ^ c !a !b
	lappend tables [truthtable [sys dump c] 2]
	sys ^ c a !b
	lappend tables [truthtable [sys dump c] 2]
	sys ^ c !a b
	lappend tables [truthtable [sys dump c] 2]
	sys ^ c a b
	lappend tables [truthtable [sys dump c] 2]
	set tables
    }
    -cleanup {rename sys {}}
    -result {0110 1001 1001 0110}
}

test bdd-9.8 {binary nand operator} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
    }
    -body {
	set tables {}
	sys nand c !a !b
	lappend tables [truthtable [sys dump c] 2]
	sys nand c a !b
	lappend tables [truthtable [sys dump c] 2]
	sys nand c !a b
	lappend tables [truthtable [sys dump c] 2]
	sys nand c a b
	lappend tables [truthtable [sys dump c] 2]
	set tables
    }
    -cleanup {rename sys {}}
    -result {0111 1011 1101 1110}
}
test bdd-9.9 {binary & operator} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
    }
    -body {
	set tables {}
	sys & c !a !b
	lappend tables [truthtable [sys dump c] 2]
	sys & c a !b
	lappend tables [truthtable [sys dump c] 2]
	sys & c !a b

	lappend tables [truthtable [sys dump c] 2]
	sys & c a b
	lappend tables [truthtable [sys dump c] 2]
	set tables
    }
    -cleanup {rename sys {}}
    -result {1000 0100 0010 0001}
}

test bdd-9.10 {binary == operator} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
    }
    -body {
	set tables {}
	sys == c !a !b
	lappend tables [truthtable [sys dump c] 2]
	sys == c a !b
	lappend tables [truthtable [sys dump c] 2]
	sys == c !a b
	lappend tables [truthtable [sys dump c] 2]
	sys == c a b
	lappend tables [truthtable [sys dump c] 2]
	set tables
    }
    -cleanup {rename sys {}}
    -result  {1001 0110 0110 1001}
}

test bdd-9.11 {binary <= operator} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
    }
    -body {
	set tables {}
	sys <= c !a !b
	lappend tables [truthtable [sys dump c] 2]
	sys <= c a !b
	lappend tables [truthtable [sys dump c] 2]
	sys <= c !a b
	lappend tables [truthtable [sys dump c] 2]
	sys <= c a b
	lappend tables [truthtable [sys dump c] 2]
	set tables
    }
    -cleanup {rename sys {}}
    -result {1101 1110 0111 1011}
}

test bdd-9.12 {binary >= operator} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
    }
    -body {
	set tables {}
	sys >= c !a !b
	lappend tables [truthtable [sys dump c] 2]
	sys >= c a !b
	lappend tables [truthtable [sys dump c] 2]
	sys >= c !a b
	lappend tables [truthtable [sys dump c] 2]
	sys >= c a b
	lappend tables [truthtable [sys dump c] 2]
	set tables
    }
    -cleanup {rename sys {}}
    -result {1011 0111 1110 1101}
}

test bdd-9.13 {binary | operator} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
    }
    -body {
	set tables {}
	sys | c !a !b
	lappend tables [truthtable [sys dump c] 2]
	sys | c a !b
	lappend tables [truthtable [sys dump c] 2]
	sys | c !a b
	lappend tables [truthtable [sys dump c] 2]
	sys | c a b
	lappend tables [truthtable [sys dump c] 2]
	set tables
    }
    -cleanup {rename sys {}}
    -result {1110 1101 1011 0111}
}

test bdd-10.1 {syllogism in the mode of barbara} {
    -setup {
	bdd::system create sys
	sys nthvar man(x) 0
	sys nthvar mortal(x) 1
	sys nthvar socrates(x) 2
    }
    -body {
	sys <= major man(x) mortal(x)
	sys <= minor socrates(x) man(x)
	sys & conjunct major minor
	sys <= conclusion socrates(x) mortal(x)
	sys <= test0 major conclusion;    # does the major premise imply 
	;			          # the conclusion?
	sys <= test1 minor conclusion;    # does the minor premise imply
	;			          # the conclusion?
	sys <= test2 conjunct conclusion; # is the syllogism valid?
	list \
	    [expr {[sys beadindex test0] == 1}] \
	    [expr {[sys beadindex test1] == 1}] \
	    [expr {[sys beadindex test2] == 1}] \
	    [truthtable [sys dump conjunct] 3]
    } 
    -cleanup {rename sys {}}
    -result {0 0 1 10110001}
}

test bdd-11.1 {demorgan} {
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
    }
    -body {
	sys & c a b
	sys nor d !a !b
	expr {[sys beadindex c] == [sys beadindex d]}
    }
    -result 1
    -cleanup {
	rename sys {}
   }
}

test bdd-11.2 {demorgan} {
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
    }
    -body {
	sys | c a b
	sys nand d !a !b
	expr {[sys beadindex c] == [sys beadindex d]}
    }
    -result 1
    -cleanup {
	rename sys {}
   }
}

test bdd-11.3 {demorgan} {
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
    }
    -body {
	sys ^ c a b
	sys ^ d !a !b
	expr {[sys beadindex c] == [sys beadindex d]}
    }
    -result 1
    -cleanup {
	rename sys {}
   }
}

test bdd-11.4 {demorgan} {
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
    }
    -body {
	sys & c a b
	sys | d !a !b
	sys ~ d d
	expr {[sys beadindex c] == [sys beadindex d]}
    }
    -result 1
    -cleanup {
	rename sys {}
   }
}

test bdd-11.5 {demorgan} {
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
    }
    -body {
	sys | c a b
	sys & d !a !b
	sys ~ d d
	expr {[sys beadindex c] == [sys beadindex d]}
    }
    -result 1
    -cleanup {
	rename sys {}
   }
}

test bdd-11.6 {demorgan} {
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
    }
    -body {
	sys ^ c a b
	sys == d !a !b
	sys ~ d d
	expr {[sys beadindex c] == [sys beadindex d]}
    }
    -result 1
    -cleanup {
	rename sys {}
   }
}

test bdd-12.1 {satcount - wrong # args} {
    -setup {bdd::system create sys}
    -body {sys satcount}
    -cleanup {rename sys {}}
    -returnCodes error
    -match glob
    -result {wrong # args: *}
}

test bdd-12.2 {satcount - no such expr} {
    -setup {bdd::system create sys}
    -body {list [catch {sys satcount garbage} result] $result $::errorCode}
    -cleanup {rename sys {}}
    -result \
	{1 {expression named "garbage" not found} {BDD ExprNotFound garbage}}
}

test bdd-12.3 {satcount - zero} {
    -setup {bdd::system create sys}
    -body {sys satcount 0}
    -cleanup {rename sys {}}
    -result 0
}
    
test bdd-12.4 {satcount - no vars} {
    -setup {bdd::system create sys}
    -body {sys satcount 1}
    -cleanup {rename sys {}}
    -result 1
}

test bdd-12.5 {satcount - one var} {
    -setup {bdd::system create sys; sys nthvar a 0}
    -body {sys satcount 1}
    -cleanup {rename sys {}}
    -result 2
}

test bdd-12.6 {satcount - two vars} {
    -setup {bdd::system create sys; sys nthvar a 1}
    -body {sys satcount 1}
    -cleanup {rename sys {}}
    -result 4
}

test bdd-12.7 {satcount - three vars} {
    -setup {bdd::system create sys; sys nthvar a 2}
    -body {sys satcount 1}
    -cleanup {rename sys {}}
    -result 8
}

test bdd-12.8 {satcount - one var of three} {
    -setup {
	bdd::system create sys
	sys nthvar a 0
	sys nthvar b 1
	sys nthvar c 2
    }
    -body {
	list [sys satcount a] [sys satcount b] [sys satcount c]
    }
    -cleanup {
	rename sys {}
    }
    -result {4 4 4}
}

test bdd-12.9 {satcount - two vars of three} {
    -setup {
	bdd::system create sys
	sys nthvar a 0
	sys nthvar b 1
	sys nthvar c 2
    }
    -body {
	sys | r1 a b
	sys | r2 a c
	sys | r3 b c
	list [sys satcount r1] [sys satcount r2] [sys satcount r3]
    }
    -cleanup {
	rename sys {}
    }
    -result {6 6 6}
}

test bdd-12.10 {satcount - complex expr} {
    -setup {
	bdd::system create sys
	sys nthvar a 0
	sys nthvar b 1
	sys nthvar c 2
	sys nthvar d 3
	sys nthvar e 4
	sys nthvar f 5
	sys nthvar g 6
	sys nthvar h 7
	sys nthvar j 8
    }
    -body {
	sys | r1 a b
	sys & r2 c d
	sys | r2 r2 e
	sys & r1 r1 r2
	sys | r2 f g
	sys | r2 r2 h
	sys & r1 r1 r2
	sys ~ r2 r1
	list [sys satcount r1] [sys satcount r2]
    }
    -cleanup {
	rename sys {}
    }
    -result {210 302}
}

test bdd-12.11 {satcount - parity tree} {
    -setup {
	bdd::system create sys
	for {set i 0} {$i < 128} {incr i} {
	    sys nthvar v$i $i
	}
    }
    -body {
	sys copy r0 0
	for {set i 0} {$i < 128} {incr i 2} {
	    sys ^ r0 r0 v$i
	}
	for {set i 1} {$i < 128} {incr i 2} {
	    sys ^ r0 r0 v$i
	}
	list [dict size [sys dump r0]] [format %llx [sys satcount r0]]
    }
    -cleanup {
	rename sys {}
    }
    -result {257 80000000000000000000000000000000}
}

test bdd-12.12 {eight queens} {*}{
    -setup {
	bdd::system create sys
	for {set i 0} {$i < 64} {incr i} {
	    sys nthvar v$i $i; sys notnthvar !v$i $i
	}
    }
    -body {

	set result {}

	sys constant solution 1

	# iterate through the cells

	for {set row 0} {$row < 8} {incr row} {
	    sys constant thisRowC 1
	    for {set col 7} {$col >= 0} {incr col -1} {
		sys constant cellC 1
		set q1 v[expr {8* $row + $col}]

		# queen here <= no other queen in the same column

		sys constant columnC 1
		for {set col2 7} {$col2 >= 0} {incr col2 -1} {
		    if {$col2 != $col} {
			set q2 v[expr {8 * $row + $col2}]
			sys & columnC columnC !$q2
		    }
		}
		sys <= columnC $q1 columnC
		sys & cellC cellC columnC
		
		# queen here <= no other queen in the same row

		sys constant rowC 1
		for {set row2 7} {$row2 >= 0} {incr row2 -1} {
		    if {$row2 != $row} {
			set q2 v[expr {8 * $row2 + $col}]
			sys & rowC rowC !$q2
		    }
		}
		sys <= rowC $q1 rowC
		sys & cellC cellC rowC

		# queen here <= no other queen in the same diagonal

		sys constant diag1C 1
		sys constant diag2C 1
		for {set row2 7} {$row2 >= 0} {incr row2 -1} {
		    if {$row2 != $row} {
			set col2 [expr {$col + $row2 - $row}]
			if {$col2 >= 0 && $col2 < 8} {
			    set q2 v[expr {8 * $row2 + $col2}]
			    sys & diag1C diag1C !$q2
			}
			set col2 [expr {$col + $row - $row2}]
			if {$col2 >= 0 && $col2 < 8} {
			    set q2 v[expr {8 * $row2 + $col2}]
			    sys & diag2C diag2C !$q2
			}
		    }
		}
		sys <= diag1C $q1 diag1C
		sys & cellC cellC diag1C

		sys <= diag2C $q1 diag2C
		sys & cellC cellC diag2C

		# accumulate into the constraint set for the row

		sys & thisRowC thisRowC cellC
	    }

	    # accumulate all constraints for a row into the solution

	    sys & solution solution thisRowC
	}
		
	# at least one queen in each column
	for {set col 0} {$col < 8} {incr col} {
	    sys constant columnC 0
	    for {set row 0} {$row < 8} {incr row} {
		set q v[expr {8*$row + $col}]
		sys | columnC columnC $q
	    }
	    sys & solution solution columnC
	}

	sys satcount solution

    }
    -cleanup {rename sys {}}
    -result 92
}

test bdd-12.13 {verification of a full adder} {
    -setup {
	bdd::system create sys
	sys nthvar x 0; sys notnthvar !x 0
	sys nthvar y 1; sys notnthvar !y 1
	sys nthvar ci 2; sys notnthvar !ci 2
    }
    -body {

	# specification is a truth table
	sys constant spec_co 0
	sys constant spec_z 0
	foreach {x y ci co z} {
	    0 0 0 0 0
	    0 0 1 0 1
	    0 1 0 0 1
	    0 1 1 1 0

	    1 0 0 0 1
	    1 0 1 1 0
	    1 1 0 1 0
	    1 1 1 1 1
	} {
	    if {$x} {
		set xlit x
	    } else {
		set xlit !x
	    }
	    if {$y} {
		set ylit y
	    } else {
		set ylit !y
	    }
	    if {$ci} {
		set cilit ci
	    } else {
		set cilit !ci
	    }
	    sys & input $cilit $ylit
	    sys & input input $xlit
	    if {$co} {
		sys | spec_co spec_co input
	    }
	    if {$z} {
		sys | spec_z spec_z input
	    }
	}

	# implementation is a gate array
	sys & gate1 x y
	sys ^ gate2 x y
	sys & gate3 gate2 ci
	sys ^ z gate2 ci
	sys | co gate1 gate3

	list [expr {[sys beadindex co] == [sys beadindex spec_co]}] \
	    [expr {[sys beadindex z] == [sys beadindex spec_z]}]
    }
    -cleanup {rename sys {}}
    -result {1 1}
}
		
test bdd-13.1 {restrict - wrong # args} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0
	sys nthvar b 1
	sys nthvar c 2
    }
    -body {
	sys restrict r1
    }
    -cleanup {
	rename sys {}
    }
    -returnCodes error
    -match glob
    -result {wrong # args: *}
}

test bdd-13.2 {restrict - can't find expr to restrict} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0
	sys nthvar b 1
	sys nthvar c 2
    }
    -body {list [catch {sys restrict r1 garbage} result] $result $::errorCode}
    -cleanup {rename sys {}}
    -result \
	{1 {expression named "garbage" not found} {BDD ExprNotFound garbage}}
}

test bdd-13.3 {restrict - can't find second expression} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0
	sys nthvar b 1
	sys nthvar c 2
	sys ^ r2 c b
	sys ^ r2  a r2
    }
    -body {list [catch {sys restrict r1 r2 garbage} result] \
	       $result $::errorCode}
    -cleanup {rename sys {}}
    -result \
	{1 {expression named "garbage" not found} {BDD ExprNotFound garbage}}
}

test bdd-13.4 {restrict - not a literal} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
	sys nthvar c 2; sys notnthvar !c 2
	sys ^ r2 c b
	sys ^ r2  a r2
    }
    -body {list [catch {sys restrict r1 c r2} result] \
	       $result $::errorCode}
    -cleanup {rename sys {}}
    -result \
	{1 {r2 is not a literal} {BDD NotLiteral r2}}
}

test bdd-13.5 {restrict - do nothing gracefully} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
	sys nthvar c 2; sys notnthvar !c 2
	sys ^ r2 c b
	sys ^ r2  a r2
    }
    -body {
	sys restrict r1 r2
	expr {[sys beadindex r1] == [sys beadindex r2]}
    }
    -cleanup {rename sys {}}
    -result 1
}

test bdd-13.6 {restrict by literal} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
	sys nthvar c 2; sys notnthvar !c 2
	sys ^ r2 c b
	sys ^ r2  a r2
    }
    -body {
	sys restrict r1 r2 !b
	sys ^ r3 a c 
	expr {[sys beadindex r1] == [sys beadindex r3]}
    }
    -cleanup {rename sys {}}
    -result 1
}

test bdd-13.7 {restrict by two literals} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
	sys nthvar c 2; sys notnthvar !c 2
	sys ^ r2 c b
	sys ^ r2  a r2
    }
    -body {
	sys restrict r1 r2 a c
	expr {[sys beadindex r1] == [sys beadindex b]}
    }
    -cleanup {rename sys {}}
    -result 1
}

test bdd-13.8 {restrict - reduce to constant} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0
	sys nthvar b 1
	sys nthvar c 2
    }
    -body {
	sys & r1 a b
	sys & r1 r1 c
	sys restrict r1 r1 a b
	sys restrict r2 r1 c
	sys beadindex r2
    }
    -cleanup {
	rename sys {}
    }
    -result 1
}

test bdd-13.10 {restrict zero} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
	sys nthvar c 2; sys notnthvar !c 2
	sys ^ r2 c b
	sys ^ r2  a r2
    }
    -body {
	sys restrict r1 0 a c
	sys beadindex r1
    }
    -cleanup {rename sys {}}
    -result 0
}

test bdd-13.11 {restrict one} {*}{
    -setup {
	bdd::system create sys
	sys nthvar a 0; sys notnthvar !a 0
	sys nthvar b 1; sys notnthvar !b 1
	sys nthvar c 2; sys notnthvar !c 2
	sys ^ r2 c b
	sys ^ r2  a r2
    }
    -body {
	sys restrict r1 1 a c
	sys beadindex r1
    }
    -cleanup {rename sys {}}
    -result 1
}

cleanupTests
return

# Local Variables:
# mode: tcl
# End:
