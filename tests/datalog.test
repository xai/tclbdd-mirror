# datalog.test --
#
#       Tests for the Datalog compiler.
#
# Copyright (c) 2014 by Kevin B. Kenny.

package require tcltest 2
namespace import -force ::tcltest::test
loadTestedCommands
package require tclbdd::datalog

proc init0 {} {
    variable people
    variable p
    set i 0
    set people {
	Andrew Anne Beatrice Charles Edward
	Elizabeth Eugenie George Harry
	James Louise William
    }
    foreach x $people {
	set p($x) $i
	incr i
    }	
    bdd::fddd::database create db \
	[bdd::fddd::interleave \
	     [bdd::fddd::domain p1 5 bigendian] \
	     [bdd::fddd::domain p2 5 bigendian] \
	     [bdd::fddd::domain p3 5 bigendian]]
    db relation isParentOf p1 p2
    db relation isGrandparentOf p1 p2
}

proc init1 {} {
    variable p
    init0
    interp alias {} loadIsParentOf {} {*}[db loader isParentOf]
    foreach {parent child} {
	Elizabeth Charles	Elizabeth Anne		Elizabeth Andrew
	Elizabeth Edward	Charles William		Charles Harry
	Andrew Beatrice		Andrew Eugenie		Edward Louise
	Edward James		William George
    } {
	loadIsParentOf $p($parent) $p($child)
    }
    rename loadIsParentOf {}
}

proc fini0 {} {
    variable people
    variable p
    db destroy
    catch {unset p}
    catch {unset people}
}
proc fini1 {} {
    fini0
}

test datalog-1.1 {assert a single fact and enumerate over it} {*}{
    -setup init0
    -body {
	proc t {parent child} [bdd::datalog::compileProgram db {
	} {
	    isParentOf($parent,$child).
	} {
	}]
	t $p(Elizabeth) $p(Charles)
	t $p(Charles) $p(William)
	set result {}
	db enumerate d isParentOf {
	    dict lappend result \
		[lindex $people [dict get $d p1]] \
		[lindex $people [dict get $d p2]]
	}
	list [dict get $result Elizabeth] [dict get $result Charles]
    }
    -result {Charles William}
    -cleanup fini0
}

test datalog-1.2 {assert a fact with a free var and enumerate over it} {*}{
    -setup init0
    -body {
	proc t {parent} [bdd::datalog::compileProgram db {
	} {
	    isParentOf($parent, _).
	} {
	}]
	t $p(Elizabeth)
	set result {}
	foreach name $people {
	    dict set need $name {}
	}
	db enumerate d isParentOf {
	    set p1 [dict get $d p1]
	    set name1 [lindex $people $p1]
	    set p2 [dict get $d p2]
	    if {$p2 >= [llength $people]} {
		set name2 $p2
	    } else {
		set name2 [lindex $people $p2]
	    }
	    lappend result $name1 $name2
	    if {$name1 ne {Elizabeth}} {
		return -level 0 -code error "Spurious parent $name1"
	    } else {
		dict unset need $name2
	    }
	}
	set need
    }
    -result {}
    -cleanup fini0
}

test datalog-1.3 {assert two facts} {*}{
    -setup init0
    -body {
	proc t {parent} [bdd::datalog::compileProgram db {
	} {
	    isParentOf(31, $parent).
	    "isParentOf"($parent, 30).
	} {
	}]
	t $p(Elizabeth)
	set result {}
	set need {}
	dict set need 31 $p(Elizabeth) {}
	dict set need $p(Elizabeth) 30 {}
	db enumerate d isParentOf {
	    set p1 [dict get $d p1]
	    set p2 [dict get $d p2]
	    if {[dict exists $need $p1 $p2]} {
		dict unset need $p1 $p2
	    } else {
		return -code error -level 0 "Spurious: $p1 $p2"
	    }
	}
	set result {}
	dict for {p1 d} $need {
	    dict for {p2 -} $d {
		return -code error -level 0 "Missing: $p1 $p2"
	    }
	}
	concat
    }
    -result {}
    -cleanup fini0
}

test datalog-2.1 {simple query} {*}{
    -setup init1
    -body {
	proc t {parent} [bdd::datalog::compileProgram db {
	    variable p
	    variable people
	    set p1 $p($parent)
	    set results {}
	} {
	    isParentOf($p1,p2)?
	} d {
	    lappend results [lindex $people [dict get $d p2]]
	} {
	    return [lsort $results]
	}]
	t Elizabeth
    }
    -cleanup fini1
    -result {Andrew Anne Charles Edward}
}

test datalog-3.1 {trivial rule} {
    -setup {
	init1
	db relation resultSet p2
    }
    -body {
	proc t {parent} [bdd::datalog::compileProgram db {
	    variable p
	    variable people
	    set p1 $p($parent)
	    set results {}
	} {
	    resultSet(p2) :- isParentOf($p1, p2).
	    resultSet(p2)?
	} d {
	    lappend results [lindex $people [dict get $d p2]]
	} {
	    lsort $results
	}]
	t Elizabeth
    }
    -cleanup fini1
    -result {Andrew Anne Charles Edward}
}

test datalog-3.2 {rule with inequality} {
    -setup {
	init1
	db relation isSiblingOf p1 p2
    }
    -body {
	proc t {} [bdd::datalog::compileProgram db {
	    variable p
	    variable people
	    set results {}
	} {
	    isSiblingOf(p1,p2) :- isParentOf(p3,p1), isParentOf(p3,p2), p1!=p2.
	    isSiblingOf(p1,p2)?
	} d {
	    lappend results \
		[lsort [list \
			    [lindex $people [dict get $d p1]] \
			    [lindex $people [dict get $d p2]]]]
	} {
	    lsort -unique $results
	}]
	t
    }
    -cleanup fini1
    -result {{Andrew Anne} {Andrew Charles} {Andrew Edward} {Anne Charles} {Anne Edward} {Beatrice Eugenie} {Charles Edward} {Harry William} {James Louise}}

}

test datalog-3.3 {rule with NOT} {*}{
    -setup {
	init1
	db relation hasParent p2
	db relation hasNoParent p2
    }
    -body {
	proc t {} [bdd::datalog::compileProgram db {
	    variable p
	    variable people
	    set results {}
	} {
	    hasParent(p2) :- isParentOf(_, p2).
	    hasNoParent(p2) :- !hasParent(p2).
	    hasNoParent(p2) ?
	} d {
	    set p2 [dict get $d p2]
	    if {$p2 < [llength $people]} {
		lappend result [lindex $people $p2]
	    }
	} {
	    lsort $result
	}]
	t
    }
    -cleanup fini1
    -result Elizabeth
}

test datalog-4.1 {simple recursion} {*}{
    -setup {
	init1
	db relation isAncestorOf p1 p2
    }
    -body {
	proc t {who} [bdd::datalog::compileProgram db {
	    variable p
	    variable people
	    set results {}
	    set p2 $p($who)
	} {
	    isAncestorOf(p1,p2) :- p1 = p2.
	    isAncestorOf(p1,p2) :- isParentOf(p1,p3), isAncestorOf(p3,p2).
	    isAncestorOf(p1, $p2) ?
	} d {
	    set p1 [dict get $d p1]
	    if {$p1 < [llength $people]} {
		lappend result [lindex $people $p1]
	    }
	} {
	    lsort $result
	}]
	t George
    }
    -cleanup fini1
    -result {Charles Elizabeth George William}
}

cleanupTests
return

# Local Variables:
# mode: tcl
# c-basic-offset: 4
# indent-tabs-mode: nil
# End:
