# fddd.test --
#
#       Tests for Finite Domain Decision Diagrams (FDDD's)
#
# Copyright (c) 2013 by Kevin B. Kenny.

package require tcltest 2
namespace import -force ::tcltest::*
tcltest::loadTestedCommands
package require tclbdd::fddd

test fddd-1.1 {domain - wrong # args} {*}{
    -body {
	bdd::fddd::domain
    }
    -result {wrong # args: *}
    -match glob
    -returnCodes error
}

test fddd-1.2 {domain - bigendian default, littleendian available} {*}{
    -body {
	list \
	    [bdd::fddd::domain a 3] \
	    [bdd::fddd::domain b 3 littleendian] \
	    [bdd::fddd::domain c 3 bigendian]
    }
    -result {{{a {0 1 2}} {a 0 a 1 a 2}} {{b {0 1 2}} {b 0 b 1 b 2}} {{c {2 1 0}} {c 2 c 1 c 0}}}
}

test fddd-1.3 {interleave - duplicated domains} {*}{
    -body {
	list [catch {
	    bdd::fddd::interleave \
		[bdd::fddd::domain a 3] \
		[bdd::fddd::domain a 3]
	} result] $result $::errorCode
    }
    -result {1 {domain named "a" appears in multiple places} {FDDD DuplicateName a}}
}

test fddd-1.4 {interleave - two domains} {*}{
    -body {
	bdd::fddd::interleave \
	    [bdd::fddd::domain a 3] \
	    [bdd::fddd::domain b 3]
    }
    -result {{a {0 2 4} b {1 3 5}} {a 0 b 0 a 1 b 1 a 2 b 2}}
}

test fddd-1.5 {interleave - three domains} {*}{
    -body {
	bdd::fddd::interleave \
	    [bdd::fddd::domain a 3] \
	    [bdd::fddd::domain b 3 bigendian] \
	    [bdd::fddd::domain c 3]
    }
    -result {{a {0 3 6} b {7 4 1} c {2 5 8}} {a 0 b 2 c 0 a 1 b 1 c 1 a 2 b 0 c 2}}
}

test fddd-1.6 {interleave - domains of unequal lengths} {*}{
    -body {
	bdd::fddd::interleave \
	    [bdd::fddd::domain a 4] \
	    [bdd::fddd::domain b 3 bigendian] \
	    [bdd::fddd::domain c 2]
    }
    -result {{a {0 3 6 8} b {7 4 1} c {2 5}} {a 0 b 2 c 0 a 1 b 1 c 1 a 2 b 0 a 3}}
}

test fddd-1.7 {concatenate - duplicated domains} {*}{
    -body {
	list [catch {
	    bdd::fddd::concatenate \
		[bdd::fddd::domain a 3] \
		[bdd::fddd::domain a 3]
	} result] $result $::errorCode
    }
    -result {1 {domain named "a" appears in multiple places} {FDDD DuplicateName a}}
}

test fddd-1.8 {concatenate - two domains} {*}{
    -body {
	bdd::fddd::concatenate \
	    [bdd::fddd::domain a 3] \
	    [bdd::fddd::domain b 3 bigendian]
    }
    -result {{a {0 1 2} b {5 4 3}} {a 0 a 1 a 2 b 2 b 1 b 0}}
}

test fddd-1.9 {concatenate of interleaved} {*}{
    -body {
	bdd::fddd::concatenate \
	    [bdd::fddd::interleave \
		 [bdd::fddd::domain a 3] \
		 [bdd::fddd::domain b 3]] \
	    [bdd::fddd::interleave \
		 [bdd::fddd::domain c 3] \
		 [bdd::fddd::domain d 3]]
    }
    -result {{a {0 2 4} b {1 3 5} c {6 8 10} d {7 9 11}} {a 0 b 0 a 1 b 1 a 2 b 2 c 0 d 0 c 1 d 1 c 2 d 2}}
}

test fddd-1.10 {interleave of concatenated} {*}{
    -body {
	bdd::fddd::interleave \
	    [bdd::fddd::concatenate \
		 [bdd::fddd::domain a 3] \
		 [bdd::fddd::domain b 3]] \
	    [bdd::fddd::concatenate \
		 [bdd::fddd::domain c 3] \
		 [bdd::fddd::domain d 3]]
    }
    -result {{a {0 2 4} c {1 3 5} b {6 8 10} d {7 9 11}} {a 0 c 0 a 1 c 1 a 2 c 2 b 0 d 0 b 1 d 1 b 2 d 2}}
}

test fddd-2.1 {reader - 1 column} {*}{
    -constraints obsolete
    -setup {
	bdd::system create sys
	set layout \
	    [bdd::fddd::concatenate \
		 [bdd::fddd::domain a 2] \
		 [bdd::fddd::domain b 2]]
    }
    -body {
	interp alias {} rdr {} {*}[bdd::fddd::reader sys x $layout a]
	rdr 1
	rdr 2
	set result {}
	sys foreach_sat s x {
	    lappend result $s
	}
	sys unset x
	lappend result [sys gc]
	set result
    }
    -cleanup {
	rename rdr {}
	sys destroy
    }
    -result {{0 0 1 1} {0 1 1 0} 2}
}

test fddd-2.2 {reader - 2 columns} {
    -constraints obsolete
    -setup {
	bdd::system create sys
	set layout \
	    [bdd::fddd::concatenate \
		 [bdd::fddd::domain a 2 bigendian] \
		 [bdd::fddd::domain b 2 bigendian]]
    }
    -body {
	interp alias {} rdr {} {*}[bdd::fddd::reader sys x $layout a b]
	rdr 1 2
	rdr 2 3
	rdr 3 1
	set result {}
	sys foreach_sat s x {
	    lappend result $s
	}
	sys unset x
	lappend result [sys gc]
	set result
    }
    -cleanup {
	rename rdr {}
	sys destroy
    }
    -result {{0 0 1 1 2 1 3 0} {0 1 1 0 2 1 3 1} {0 1 1 1 2 0 3 1} 2}
}

cleanupTests
return

# Local Variables:
# mode: tcl
# c-basic-offset: 4
# End:
